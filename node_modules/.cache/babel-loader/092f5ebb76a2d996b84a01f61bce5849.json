{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 1 : paginatedTransactions.nextPage\n      /*For Bug 4: defaulting page to 1 rather than 0*/\n\n    });\n    setPaginatedTransactions(response);\n  }, [fetchWithCache, paginatedTransactions]);\n  setPaginatedTransactions(response => {\n    if (response === null) {\n      return response;\n    }\n\n    return {\n      data: response.data,\n      nextPage: response.nextPage\n    };\n  });\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","data","invalidateData"],"sources":["/home/mhurchaidh/Development/code/interview-challenges/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 1 : paginatedTransactions.nextPage, /*For Bug 4: defaulting page to 1 rather than 0*/\n      }\n      )\n      setPaginatedTransactions(response)\n      \n    }, [fetchWithCache, paginatedTransactions])\n    setPaginatedTransactions((response) => {\n      if (response === null) {\n        return response\n      }\n\n      return { data: response.data, nextPage: response.nextPage }\n    })\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;MAAU;;IAD7E,CAFmC,CAArC;IAMEJ,wBAAwB,CAACE,QAAD,CAAxB;EAED,CATyB,EASvB,CAACL,cAAD,EAAiBE,qBAAjB,CATuB,CAA5B;EAUEC,wBAAwB,CAAEE,QAAD,IAAc;IACrC,IAAIA,QAAQ,KAAK,IAAjB,EAAuB;MACrB,OAAOA,QAAP;IACD;;IAED,OAAO;MAAEG,IAAI,EAAEH,QAAQ,CAACG,IAAjB;MAAuBD,QAAQ,EAAEF,QAAQ,CAACE;IAA1C,CAAP;EACD,CANuB,CAAxB;EAQF,MAAME,cAAc,GAAGb,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEK,IAAI,EAAEN,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDK;EAAlD,CAAP;AACD;;GA7BeV,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}